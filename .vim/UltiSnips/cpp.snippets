snippet req
REQUIRE_FALSE(${1});${2}
endsnippet

snippet chk
CHECK_FALSE(${1});${2}
endsnippet

snippet sec
SECTION("${1}") {
	${2}
}
endsnippet

snippet tc
TEST_CASE("${1}") {
	${2}
}
endsnippet

snippet ns "ns" !
namespace ${1} {

${2}

}
endsnippet

snippet inc "inc" !
#include <${1}>${2}
endsnippet

snippet Inc "Inc" !
#include "${1}"${2}
endsnippet

snippet co "co" !
std::cout << ${1}
endsnippet

snippet el "el" !
std::endl
endsnippet

snippet u32 "u32" !w
uint32_t
endsnippet

snippet i32 "i32" !w
int32_t
endsnippet

snippet u16 "u16" !w
uint16_t
endsnippet

snippet i16 "i16" !w
int16_t
endsnippet

snippet u8 "u8" !w
uint8_t
endsnippet

snippet i8 "i8" !w
int8_t
endsnippet

snippet u64 "u64" !w
uint64_t
endsnippet

snippet i64 "i64" !w
int64_t
endsnippet

snippet 2f "2f" !w
sf::Vector2f
endsnippet

snippet 2i "2i" !w
sf::Vector2i
endsnippet

snippet 2v "2v" !w
sf::Vector2<${1:Type}>$2
endsnippet

snippet fr "fr" !w
sf::FloatRect
endsnippet

snippet str "str" !w
std::string
endsnippet

snippet s "s" !w
std::
endsnippet

snippet vec "vec" !w
std::vector<${1:type}>$2
endsnippet

snippet map "map" !w
std::map<${1:IndexType}, ${2:ValueType}>$3
endsnippet

snippet class
class ${1:name} {
	public:
		$2

	private:
};
endsnippet

snippet sc
static_cast<${1:Type}>($2)$3
endsnippet

snippet up
std::unique_ptr<${1:Type}> $2
endsnippet

snippet config
#pragma once

#include <string>

const std::string ASSETS_PATH = "@ASSETS_PATH@";
endsnippet

snippet main
int main() {
	${1}

	return 0;
}
endsnippet

snippet main_sfml
#include <SFML/Graphics.hpp>

#include <cstdint>

const sf::VideoMode VIDEO_MODE(1280, 720);

int main() {
	sf::RenderWindow window(VIDEO_MODE, "SFML", sf::Style::Close);
	window.setFramerateLimit(120);

	sf::Event event;
	bool terminate = false;
	sf::Clock frame_clock;
	sf::Time frame_time = sf::Time::Zero;

	while(terminate == false) {
		while(window.pollEvent(event) == true) {
			if(event.type == sf::Event::KeyPressed) {
				if(event.key.code == sf::Keyboard::Escape) {
					terminate = true;
				}
			}
		}

		// Update simulation.
		frame_time = frame_clock.restart();

		// Render.
		window.clear();
		window.display();
	}

	return 0;
}
endsnippet
